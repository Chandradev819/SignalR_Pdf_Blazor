@page "/"
@page "/pdfeditor"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<PageTitle>Pdf Editor</PageTitle>
<h3>PDF Live Collabration Demo</h3>
<hr />

<div class="form-group">
    <label>
        Type on Textbox, Text will reflect everywhere on save event:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<hr>
 <div id="adobe-dc-view"></div>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/pdfcollaborationhub"))
            .Build();

        hubConnection.On<string>("ReceivePdfCommand", (message) =>
        {
            var encodedMsg = $"{message}";
            //messages.Add(encodedMsg);
            messageInput = encodedMsg;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendPdfCommand", messageInput);
        }
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            string path = @"https://documentservices.adobe.com/view-sdk-demo/PDFs/Bodea Brochure.pdf";
            await JSRuntime.InvokeAsync<object>("adobePdfFunctions.adobePdfViwer", path);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}